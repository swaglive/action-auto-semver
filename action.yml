name: Auto Semver
description: Auto generate semver
inputs:
  major_labels:
    description: space-separated labels indicate it would bump major version
    required: false
    default: major
  minor_labels:
    description: space-separated labels indicate it would bump minor version
    required: false
    default: minor
  patch_labels:
    description: space-separated labels indicate it would bump patch version
    required: false
    default: patch
  token:
    description: the repo's Github token that use the action
    required: false
    default: ${{ github.token }}
  repo:
    required: false
    default: ${{ github.repository }}
  pr_number:
    description: the PR number that the repo  from
    required: true
  previous_semver:
    description: the previous semver that increment from
    required: true
runs:
  using: composite
  steps:
    - id: get_labels
      shell: bash
      env:
        GITHUB_TOKEN: ${{ inputs.token }}
        GH_REPO: ${{ inputs.repo }}
        PR_NUMBER: ${{ inputs.pr_number }}
      run: |
        # this would return multiple labels, since pull request may attach multiple labels and one of the label may indicate the predefined semver label
        # try to match  mergeCommit by `$commit`, it should exist when trigger is `on.push master`  
        labels=$(gh pr view $PR_NUMBER --json labels \
        | jq -r '.labels | select(length > 0) | map(.name) | join(" ")')
        echo "::set-output name=current_labels::$labels"
    - id: auto-semver
      uses: "swaglive/action-semver@v1"
      with:
        input: ${{ inputs.previous_semver }}
    - id: calculate-semver
      shell: python
      run: |
        SPACE_SEP = " ";

        labels = '${{ steps.get_labels.outputs.current_labels }}'
        input_major_labels = '${{ inputs.major_labels }}'
        input_minor_labels = '${{ inputs.minor_labels }}'
        input_patch_labels = '${{ inputs.patch_labels }}'

        labels = set(labels.split(SPACE_SEP))

        major = int(${{ steps.auto-semver.outputs.major }})
        minor = int(${{ steps.auto-semver.outputs.minor }})
        patch = int(${{ steps.auto-semver.outputs.patch }})

        bump_major = set(input_major_labels.split(SPACE_SEP)).intersection(labels)
        bump_minor = set(input_minor_labels.split(SPACE_SEP)).intersection(labels)
        bump_patch = set(input_patch_labels.split(SPACE_SEP)).intersection(labels)

        if bump_major:
            major = major + 1;
        if bump_minor:
            minor = minor + 1;
        if bump_patch:
            patch = patch + 1;
        # if not bump any of version, it return previous one

        version = f'{major}.{minor}.{patch}'
        print(f'::set-output name=version::{version}')
        print(f'::set-output name=major::{major}')
        print(f'::set-output name=minor::{minor}')
        print(f'::set-output name=patch::{patch}')
