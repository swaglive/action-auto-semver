name: Auto Semver
description: Auto generate semver
inputs:
  major_labels:
    description: labels indicate it would bump major vresion
    required: false
    default: major
  minor_labels:
    description: labels indicate it would bump minor vresion
    required: false
    default: minor
  patch_labels:
    description: labels indicate it would bump patch vresion
    required: false
    default: patch
  token:
    description: Github token thase use the action
    required: false
    default: ${{ github.token }}
runs:
  using: composite
  steps:
    - id: last_tag
      shell: bash
      env:
        GITHUB_TOKEN: ${{ inputs.token }}
      run: |
        gh version
        tag_name=$(gh release list -L 1 | awk '{print $1}')
        echo "::set-output name=tag_name::$tag_name"
    - id: get_labels
      shell: bash
      env:
        GITHUB_TOKEN: ${{ inputs.token }}
      run: |
        commit=${{ github.sha }}
        base='${{ github.ref }}'
        # TODO: if pull request has multiple labels, how to acquire multiple labels
        labels=($(gh pr list --limit 1 --state merged --search '$commit' --json  mergeCommit,labels,author,title | jq '.[0].labels | to_entries[].value.name'))
        echo "::set-output name=current_labels::$labels"
    - id: calculate-semver
      shell: python
      run: |
        prev = '${{ steps.last_tag.outputs.tag_name }}'

        labels = ${{ steps.get_labels.outputs.current_labels }}
        printf(f'{prev} {labels}')

        input_major_labels = '${{ inputs.major_labels }}'
        input_minor_labels = '${{ inputs.minor_labels }}'
        input_patch_labels = '${{ inputs.patch_labels }}'


        previous_version = prev.split('.')
        labels = set([labels])

        major = int(previous_version[0])
        minor = int(previous_version[1])
        patch = int(previous_version[2])

        bump_major = len (set(input_major_labels.split(',')).intersection(labels)) > 0
        bump_minor = len (set(input_minor_labels.split(',')).intersection(labels)) > 0
        bump_patch = len (set(input_patch_labels.split(',')).intersection(labels)) > 0


        if bump_major:
            major = major + 1;
            minor = 0;
            patch = 0;
        elif bump_minor:
            patch = 0;
            minor = minor + 1;
        elif bump_patch:
            patch = patch + 1;
        # if not bump any of version, it return previous one
        version = f'{major}.{minor}.{patch}'
        print(f'{version}')
        print(f'::set-output name=version::{version}')
