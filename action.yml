name: Auto Semver
description: Auto generate semver
inputs:
  major_labels:
    description: space-separated labels indicate it would bump major version
    required: false
    default: major
  minor_labels:
    description: space-separated labels indicate it would bump minor version
    required: false
    default: minor
  patch_labels:
    description: space-separated labels indicate it would bump patch version
    required: false
    default: patch
  token:
    description: the repo's Github token that use the action
    required: false
    default: ${{ github.token }}
  repository:
    description: the repo that user the action
    required: false
    default: ${{ github.repository }}
  pr_number:
    description: the PR number that the pr from
    required: true
  previous_semver:
    description: the previous semver that increment from
    required: true
outputs:
  version:
    description: The full matched version string
    value: ${{ steps.auto_semver.outputs.version }}
  major:
    description: Semver major version
    value: ${{ steps.auto_semver.outputs.major }}
  minor:
    description: Semver minor version
    value: ${{ steps.auto_semver.outputs.minor }}
  patch:
    description: Semver patch version
    value: ${{ steps.auto_semver.outputs.patch }}
runs:
  using: composite
  steps:
    - id: get_labels
      shell: bash
      env:
        GITHUB_TOKEN: ${{ inputs.token }}
        GH_REPO: ${{ inputs.repository }}
        PR_NUMBER: ${{ inputs.pr_number }}
      run: |
        # this would return multiple labels, since pull request may attach multiple labels and one of the label may indicate the predefined semver label
        labels=$(gh pr view $PR_NUMBER --json labels \
        | jq -r '.labels[].name' | xargs echo)
        echo "::set-output name=labels::$labels"
    - id: semver
      uses: swaglive/action-semver@v1
      with:
        input: ${{ inputs.previous_semver }}
    - id: auto_semver
      shell: python
      run: |

        labels = '${{ steps.get_labels.outputs.labels }}'
        input_major_labels = '${{ inputs.major_labels }}'
        input_minor_labels = '${{ inputs.minor_labels }}'
        input_patch_labels = '${{ inputs.patch_labels }}'

        labels = set(labels.split())

        major = int(${{ steps.semver.outputs.major }})
        minor = int(${{ steps.semver.outputs.minor }})
        patch = int(${{ steps.semver.outputs.patch }})

        major = major + bool(set(input_major_labels.split()) & labels)
        minor = minor + bool(set(input_minor_labels.split()) & labels)
        patch = patch + bool(set(input_patch_labels.split()) & labels)

        # if not bump any of version, it return previous one
        version = f'{major}.{minor}.{patch}'
        prev_version = '${{ inputs.previous_semver }}'
        if prev_version.startswith('v'):
          version = f'v{version}'

        print(f'::set-output name=version::{version}')
        print(f'::set-output name=major::{major}')
        print(f'::set-output name=minor::{minor}')
        print(f'::set-output name=patch::{patch}')
